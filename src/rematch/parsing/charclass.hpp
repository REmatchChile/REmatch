#ifndef CHARCLASS_HPP
#define CHARCLASS_HPP

#include <set>
#include <string>
#include <ostream>

#include <boost/functional/hash.hpp> // For boost::hash_combine

#include "parsing/grammar/autogenerated/REmatchParser.h"

namespace rematch {

struct CharRange {
	CharRange() : lo(0), hi(0) {}
	CharRange(char l, char h): lo(l), hi(h) {}

	bool operator==(const CharRange& rhs) const { return lo == rhs.lo && hi == rhs.hi; }

	char lo;
	char hi;
};

struct CharRangeLess {
	bool operator()(const CharRange &a, const CharRange &b) const {
		return a.hi < b.lo;
	}
};


using CharRangeSet = std::set<CharRange, CharRangeLess>;

class CharClassBuilder;

class CharClass {
 public:
	// Check if CharClass contains a char
	bool contains(char a);

	CharClass(int maxranges) : ranges_(new CharRange[maxranges]) {}

	~CharClass();

	bool is_dot() const {return nranges_ == 1 && ranges_[0].lo == 0 && ranges_[0].hi == CHAR_MAX;}

	friend std::ostream& operator<<(std::ostream &os, CharClass const &cc);
 private:

	friend class CharClassBuilder;
	friend class FilterFactory;
	friend struct std::hash<rematch::CharClass>;

	int nchars_;
	CharRange* ranges_;
	int nranges_;

	CharClass(const CharClass&) = default;
	CharClass& operator=(const CharClass&) = default;
	bool operator<(const CharClass& cc) const;

}; // end class CharClass

} // end namespace rematch

#endif // end charclass_hpp
