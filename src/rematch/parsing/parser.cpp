#include "parser.hpp"

#include "antlr4-runtime.h"
#include "parsing/error_listener.hpp"
#include "parsing/grammar/autogenerated/REmatchParser.h"
#include "parsing/grammar/autogenerated/REmatchLexer.h"
#include "parsing/visitors/variable_factory_visitor.hpp"
#include "parsing/visitors/filter_factory_visitor.hpp"

namespace rematch {

LogicalVA doParse(const std::string &input) {
  // * Parse Tree
  antlr4::ANTLRInputStream stream(input);
  REmatchLexer lexer(&stream);
  antlr4::CommonTokenStream tokens(&lexer);
  REmatchParser parser(&tokens);
  parser.removeErrorListeners();
  antlr4::ParserErrorListener listener;
  parser.addErrorListener(&listener);
  REmatchParser::RootContext *root = parser.root();

  // Variable Factory
  visitors::VariableFactoryVisitor vfv;
  vfv.visit(root);
  std::shared_ptr<VariableFactory> vfact_ptr = vfv.vfact_ptr;

  // Filter Factory and Logical VA
  visitors::FilterFactoryVisitor ffv(vfact_ptr);
  ffv.visit(root);
  std::shared_ptr<FilterFactory> ffact_ptr = ffv.ffact_ptr;
  std::unique_ptr<LogicalVA>     lva_ptr   = std::move(ffv.lva_ptr);

  // FIXME: JUST FOR DEBUGGING
  //std::cout << "------------------------" << std::endl;
  //lva_ptr->set_factories(vfact_ptr, ffact_ptr);
  //std::cout << *lva_ptr << std::endl;
  //std::cout << "------------------------" << std::endl;

  return *lva_ptr;
}

std::unique_ptr<LogicalVA> regex2LVA(std::string regex) {
  LogicalVA lva = doParse(regex);
  std::unique_ptr<LogicalVA> lva_ptr = std::make_unique<LogicalVA>(lva);
  return lva_ptr;
}

} // end namespace rematch
