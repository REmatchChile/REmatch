.TH "rematch::parsing::LogicalVA" 3 "Tue Jan 31 2023" "Version 1" "Rematch" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rematch::parsing::LogicalVA
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLogicalVAState\fP * \fBinitial_state\fP () const"
.br
.ti -1c
.RI "\fBLogicalVAState\fP * \fBaccepting_state\fP () const"
.br
.ti -1c
.RI "\fBLogicalVA\fP ()"
.br
.RI "Empty \fBLogicalVA\fP construction (only one \fBLogicalVAState\fP) "
.ti -1c
.RI "\fBLogicalVA\fP (const \fBLogicalVA\fP &A)"
.br
.ti -1c
.RI "\fBLogicalVA\fP (\fBCharClass\fP charclass)"
.br
.RI "Atomic VA\&. "
.ti -1c
.RI "void \fBtrim\fP ()"
.br
.RI "Transforms the automaton graph to a trimmed automaton\&. "
.ti -1c
.RI "void \fBcat\fP (\fBLogicalVA\fP &a2)"
.br
.RI "Inplace transformation from R to RR'\&. "
.ti -1c
.RI "void \fBalter\fP (\fBLogicalVA\fP &a2)"
.br
.RI "Equivalent to R1|R2\&. "
.ti -1c
.RI "void \fBkleene\fP ()"
.br
.RI "Equivalent to R*\&. "
.ti -1c
.RI "void \fBstrict_kleene\fP ()"
.br
.RI "Equivalent to R+\&. "
.ti -1c
.RI "void \fBoptional\fP ()"
.br
.RI "Equivalent to R? "
.ti -1c
.RI "void \fBassign\fP (std::bitset< 64 > open_code, std::bitset< 64 > close_code)"
.br
.RI "Equivalent to !x{R}\&. "
.ti -1c
.RI "void \fBrepeat\fP (int min, int max)"
.br
.RI "Inplace transformation from R to R{min,max}\&. "
.ti -1c
.RI "void \fBremove_captures\fP ()"
.br
.RI "Remove capture transitions as if they were instantaneous (epsilon labeled) "
.ti -1c
.RI "void \fBremove_epsilon\fP ()"
.br
.RI "Removes epsilon transitions\&. "
.ti -1c
.RI "void \fBrelabel_states\fP ()"
.br
.RI "Make is so that the node id's start in 0 and are increasing\&. "
.ti -1c
.RI "bool \fBhas_epsilon\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBLogicalVAState\fP * > \fBstates\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBExtendedVA\fP"
.br
.RI "A Logical Variable Set Automaton is an automaton extended with capture variables, equivalently expressive as the input REGEX\&. "
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBLogicalVA\fP const &A)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void rematch::parsing::LogicalVA::trim ()"

.PP
Transforms the automaton graph to a trimmed automaton\&. This being that every state is reacheable from the initial state, and the final state is reachable from every state\&. We'll do a simple BFS from the initial and final states (using backwards transitions), storing the states that are reached by both procedures
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class ExtendedVA\fC [friend]\fP"

.PP
A Logical Variable Set Automaton is an automaton extended with capture variables, equivalently expressive as the input REGEX\&. \fBLogicalVA\fP operations, all modify the current \fBLogicalVA\fP to get the result (the operations are inplace)
.PP
For the theoretical background refer to the paper: REmatch: a regex engine for finding all matches (Riveros, Van Sint Jan, Vrgoc 2023)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Rematch from the source code\&.
